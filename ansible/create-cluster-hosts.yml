---
- name: Preflight to set up machine specific variables
  hosts: cluster
  gather_facts: false
  tasks:
    - debug:
        var: prefix | mandatory



- name: Provision a set of hosts in the Catalyst Cloud
  hosts: localhost
  gather_facts: false
  vars:
    # optional suffix to namespace resources
    host_set: "{{ groups.cluster | unique | list }}"
    # change if required or override at runtime using --extra-vars

    security_groups: "{{ host_set | map('extract', hostvars, 'security_groups') | sum(start=[]) | unique | list }}"

    security_group_names: "{{ security_groups | map(attribute='group') | unique | list }}"
    ansible_python_interpreter: "/home/{{ lookup('env', 'USER') }}/catalystcloud-ansible/ansible-venv/bin/python"
  tasks:
    - name: Connect to Catalyst Cloud
      os_auth:
        cloud: docker

    - name: Create keypair
      os_keypair:
        name: "{{ keypair_name }}"
        public_key: "{{ ssh_public_key }}"
        cloud: docker

    - name: Create Network
      os_network:
        name: "{{ network_name }}"
        state: present
        cloud: docker

    - name: Create subnet
      os_subnet:
        name: "{{ subnet_name }}"
        network_name: "{{ network_name }}"
        state: present
        cidr: "{{ subnet_cidr }}"
        allocation_pool_start: "{{ subnet_dhcp_start }}"
        allocation_pool_end: "{{ subnet_dhcp_end }}"
        ip_version: 4
        dns_nameservers: "{{ default_nameservers }}"
        cloud: docker


    - name: Create router
      os_router:
        state: present
        name: "{{ router_name }}"
        network: "{{ public_net_name }}"
        interfaces:
          - "{{ subnet_name }}"
        cloud: docker

    - name: Create security groups
      os_security_group:
        state: present
        name: "{{ item }}"
        cloud: docker
      with_items: "{{ security_group_names }}"

    - name: Add rules for security group
      os_security_group_rule:
        state: present
        security_group: "{{ item.group }}"
        protocol: "{{ item.proto | default('tcp') }}"
        port_range_min: "{{ omit if item.port == 'any' else item.port }}"
        port_range_max: "{{ omit if item.port == 'any' else item.port_end | default(item.port) }}"
        remote_ip_prefix: "{{ item.remote_ip_prefix | default(omit) }}"
        remote_group: "{{ item.remote_group | default(omit) }}"
        cloud: docker
      with_items: "{{ security_groups }}"


    - name: Create cluster instances
      os_server:
        cloud: docker
        state: present
        name: "{{ item }}"
        image: "{{ default_os_image }}"
        key_name: "{{ keypair_name  }}"
        flavor: "{{ default_flavor }}"
        nics:
          - net-name: "{{ network_name }}"
        security_groups: "default,{{ hostvars[item].security_groups | map(attribute='group') | list | unique | join(',')}}"
        userdata: |
                  #cloud-config
                  datasource:
                    OpenStack:
                      metadata_urls: ["http://169.254.169.254"]
                      max_wait: -1
                  users:
                    - name: "{{ hostvars[item].ssh_user }}"
                      shell: /bin/bash
                      lock_passwd: true
                      sudo: ALL=(ALL) NOPASSWD:ALL
                      ssh_authorized_keys:
                        - "{{ ssh_public_key }}"
      with_items: "{{ host_set }}"

    - name: Assign floating ips
      os_floating_ip:
        cloud: docker
        state: present
        reuse: yes
        wait: true
        server: "{{ item }}"
      register: floating_ip_info
      with_items:
        - "{{ host_set }}"

    - name: Append floating ip to host info
      add_host:
        name: "{{ item.item }}"
        ansible_host: "{{ item.floating_ip.floating_ip_address }}"
        ansible_user: "{{ hostvars[item.item].ssh_user }}"
        fixed_ip: "{{ item.floating_ip.fixed_ip_address }}"
        ansible_ssh_common_args: "-o StrictHostKeyChecking=no"
        ansible_python_interpreter: /usr/bin/python
      with_items: "{{ floating_ip_info.results }}"

    - wait_for:
        host: "{{ hostvars[item].ansible_host }}"
        port: 22
      with_items: "{{ host_set }}"


- name: Basic host setup
  hosts: cluster
  become: true
  gather_facts: false
  vars: 
    host_set: "{{ groups.cluster  }}"
  serial: 1
  tasks:
    - name: Remove floating ip from known hosts
      delegate_to: localhost
      known_hosts:
        name: "{{ ansible_host }}"
        state: absent

    - name: "Add {{ inventory_hostname }} to local ~/.ssh/config"
      delegate_to: localhost
      blockinfile:
        dest: "{{ lookup('env', 'HOME') }}/.ssh/config"
        insertbefore: BOF
        block: |
          Host {{ inventory_hostname }}
              User {{ ssh_user }}
              StrictHostKeyChecking no
          Host {{ ansible_host }}
              Hostname {{ inventory_hostname }}
              User {{ ssh_user }}
              StrictHostKeyChecking no
        marker: "# {mark} ANSIBLE MANAGED BLOCK for {{ inventory_hostname }}"

    - name: "Add {{ inventory_hostname }} to /etc/hosts"
      delegate_to: localhost
      become: yes
      blockinfile:
        dest: /etc/hosts
        insertafter: EOF
        block: |
          {{ ansible_host }} {{ inventory_hostname }}
        marker: "# {mark} ANSIBLE MANAGED BLOCK for {{ inventory_hostname }}"

- name: Basic host setup
  hosts: cluster
  become: true
  gather_facts: false
  vars: 
    host_set: "{{ groups.cluster  }}"
  tasks:

    - name: Update apt cache
      raw: apt update -y

    - name: Install python
      raw: >
        which python || apt-get install -y python && echo 'installed'
      register: python
      changed_when: python.stdout == 'installed'

    - name: Add NZ locale to all instances
      locale_gen:
        name: en_NZ.UTF-8
        state: present

    - name: Add entry to /etc/hosts for all instance
      lineinfile:
        dest: /etc/hosts
        line: "{{ hostvars[item].fixed_ip }} {{ item }}"
      with_items: "{{ host_set }}"



- name: Set up Docker on hosts
  hosts: cluster
  become: yes
  roles: 
    - docker


- name: Add manager ip as fake DNS for voting app
  hosts: localhost
  become: yes
  tasks:
    - name: Add manager IP to /etc/hosts
      blockinfile:
        dest: /etc/hosts
        insertafter: EOF
        block: |
          {{ hostvars[groups.worker[0]].ansible_host }} voting.appl
        marker: "# {mark} ANSIBLE MANAGED BLOCK FOR voting.app"

